version: '3'

# .env file
dotenv: ['/home/pi/Documents/development/LoyaltyCards/secrets/.env']

# Global variables
vars:
  MANUAL_VERSION_PICKED: 'false'
  MANUAL_VERSION: '0.1.3'
  COMPOSE_PROJECT_NAME: '{{.PROJECT_BASE_NAME}}-app'
  BACKEND_DEPLOY_DIR: '/home/pi/Documents/development/LoyaltyCards'
  BACKEND_SOURCE_DIR: '{{.BACKEND_DEPLOY_DIR}}/source/LoyaltyCards/Backend'
  DOCKER_DEPLOYMENT_DIR: '/home/pi/docker/development/loyalty-cards-app'
  START_TIME:
        sh: date +%s > /tmp/deploy_start_time && cat /tmp/deploy_start_time

# Tasks
tasks:
  git-pull:
    desc: Pull latest changes from git
    cmds:
      - |
        cd {{.BACKEND_DEPLOY_DIR}}/source/LoyaltyCards &&
        git fetch origin main &&
        git checkout main &&
        git reset --hard origin/main &&
        git pull origin main &&
        git pull --tags

  specify-version:
    desc: Specify version for deployment
    cmds:
      - |
        cd {{.BACKEND_SOURCE_DIR}}
        LATEST_TAG=$(git tag --sort=-creatordate | head -n1)
        LATEST_TAG_NO_V="${LATEST_TAG#v}"
        if [ "{{.MANUAL_VERSION_PICKED}}" = "true" ]; then
          VERSION="{{.MANUAL_VERSION}}"
          echo "Manual version picked: $VERSION"
        else
          VERSION=$(grep -oPm1 '(?<=<Version>)[^<]+' Directory.Build.props)
          echo "Version from Directory.Build.props: $VERSION"
          if [ "$VERSION" != "$LATEST_TAG_NO_V" ]; then
            echo "ERROR: Version in Directory.Build.props ($VERSION) does not match latest git tag ($LATEST_TAG_NO_V)" >&2
            exit 1
          fi
        fi
        echo "$VERSION" > /tmp/deploy_version

  copy-secrets:
    desc: Copy secrets to source directory
    cmds:
      - cp {{.BACKEND_DEPLOY_DIR}}/secrets/appsettings.Production.json {{.BACKEND_SOURCE_DIR}}/LoyaltyCards.API/appsettings.Production.json

  checkout-version:
    desc: Show current version
    cmds:
      - |
        VERSION=$(cat /tmp/deploy_version)
        cd {{.BACKEND_SOURCE_DIR}} &&
        if [ "{{.MANUAL_VERSION_PICKED}}" = "true" ]; then
          echo "Checking out tag v$VERSION...";
          git checkout "v$VERSION";
        else
          echo "Current version is $VERSION (latest tag, no checkout performed)";
        fi

  build-and-push-docker-image:
    desc: Build and push Docker image to Docker Hub
    cmds:
      - echo "Building Docker image version $(cat /tmp/deploy_version)"
      - echo "{{.DOCKER_HUB_TOKEN}}" | docker login -u {{.DOCKER_HUB_USERNAME}} --password-stdin
      - docker buildx rm {{.PROJECT_BASE_NAME}}-builder || true
      - docker buildx create --name {{.PROJECT_BASE_NAME}}-builder --use
      - |
        VERSION=$(cat /tmp/deploy_version)
        if [ "{{.MANUAL_VERSION_PICKED}}" = "false" ]; then
          docker buildx build --builder {{.PROJECT_BASE_NAME}}-builder --platform linux/arm64 \
            -t {{.DOCKER_HUB_USERNAME}}/loyaltycardsbackend:$VERSION \
            -t {{.DOCKER_HUB_USERNAME}}/loyaltycardsbackend:latest \
            -f {{.BACKEND_SOURCE_DIR}}/LoyaltyCards.API/Dockerfile \
            --push \
            {{.BACKEND_SOURCE_DIR}}
        else
          docker buildx build --builder {{.PROJECT_BASE_NAME}}-builder --platform linux/arm64 \
            -t {{.DOCKER_HUB_USERNAME}}/loyaltycardsbackend:$VERSION \
            -f {{.BACKEND_SOURCE_DIR}}/LoyaltyCards.API/Dockerfile \
            --push \
            {{.BACKEND_SOURCE_DIR}}
        fi
      - docker logout
      - echo "Docker image version $VERSION built and pushed successfully"

  deploy-on-pi:
    desc: Deploy application on RaspberryPi
    cmds:
      - cp {{.BACKEND_SOURCE_DIR}}/deploy/docker-compose.yaml {{.DOCKER_DEPLOYMENT_DIR}}/docker-compose.yaml
      - cp {{.BACKEND_DEPLOY_DIR}}/secrets/.env {{.DOCKER_DEPLOYMENT_DIR}}/.env
      - |
        VERSION=$(cat /tmp/deploy_version)
        cd {{.DOCKER_DEPLOYMENT_DIR}} &&
          export COMPOSE_PROJECT_NAME={{.COMPOSE_PROJECT_NAME}} &&
          export PROJECT_BASE_NAME={{.PROJECT_BASE_NAME}} &&
          export VERSION=$VERSION &&
          export DOCKER_HUB_USERNAME={{.DOCKER_HUB_USERNAME}} &&
          docker pull {{.DOCKER_HUB_USERNAME}}/loyaltycardsbackend:$VERSION &&
          docker compose down --volumes=false || true &&
          docker compose up -d
      - echo "Docker Container deployed successfully"

  docker-cleanup:
    desc: Remove only the buildx builder used for builds
    cmds:
      - echo "Removing buildx builder {{.COMPOSE_PROJECT_NAME}}-builder if it exists..."
      - docker buildx rm {{.COMPOSE_PROJECT_NAME}}-builder || true
      - echo "Buildx builder cleanup complete."

  time-tracking:
    desc: Show deployment time
    cmds:
      - echo "Deployment started at $(cat /tmp/deploy_start_time)"
      - echo "Deployment ended at $(date +%s)"
      - |
        echo "Total deployment time: $(($(date +%s) - $(cat /tmp/deploy_start_time))) seconds"
      - rm /tmp/deploy_start_time

  # pull, build docker, push docker, pull docker and deploy
  deploy:
    desc: Full deployment process
    cmds:
      - task: git-pull
      - task: specify-version
      - task: copy-secrets
      - task: checkout-version
      - task: build-and-push-docker-image
      - task: deploy-on-pi
      - task: docker-cleanup
      - task: time-tracking
